@inject ConnectFour.Shared.GameState state
<link href="~/css/Board.css" rel="stylesheet">

<HeadContent>
    <style>
        :root {
            --board-bg: red; /** the color of the board **/
            --player1: blue; /** Player 1's piece color **/
            --player2: yellow; /** Player 2's piece color **/
        }
    </style>
</HeadContent>


        <img src="/logo/logo.png"/>


            <h2>@WinnerMessage</h2>
            <br />
            <button class="btn btn-info" @onclick="ResetGame">Reiniciar el juego</button>
            <br />
            <span class="alert-danger"><h4>@ErrorMessage</h4></span>
            <br />
            <span class="alert-info"><h4>@CurrentTurn</h4></span>
        

<br />
<br />
<nav>
    <span title="Click to play a piece" @onclick="() => PlayPiece(1)">🔽</span>
    <span title="Click to play a piece" @onclick="() => PlayPiece(2)">🔽</span>
    <span title="Click to play a piece" @onclick="() => PlayPiece(3)">🔽</span>
    <span title="Click to play a piece" @onclick="() => PlayPiece(4)">🔽</span>
    <span title="Click to play a piece" @onclick="() => PlayPiece(5)">🔽</span>
    <span title="Click to play a piece" @onclick="() => PlayPiece(6)">🔽</span>
    <span title="Click to play a piece" @onclick="() => PlayPiece(7)">🔽</span>
</nav>

<div>
    <div class="board">
        @for (var i = 0; i < 42; i++)
        {
            <span class="container">
                <span>

                </span>
            </span>
        }
    </div>
    @for (var i = 0; i < 42; i++)
    {
        <span class="@piezas[i]"></span>
    }
</div>

<br />
<br />

@code {
    private string[] piezas = new string[42];
    private string WinnerMessage = string.Empty;

    private string ErrorMessage = string.Empty;

    private string CurrentTurn => (WinnerMessage == string.Empty) ? $"Turno del Jugador: {state.PlayerTurn}" : "";

    private string ResetStyle => (WinnerMessage == string.Empty) ? "display: none;" : "";

    private void PlayPiece(byte col)
    {
        ErrorMessage = string.Empty;
        try
        {
            var landingRow = state.PlayPiece(col);
            var cssClass = $"player{state.PlayerTurn} col{col} drop{landingRow}";
            piezas[state.CurrentTurn - 1] = cssClass;
        }
        catch (ArgumentException ex)
        {
            ErrorMessage = ex.Message;
        }
        WinnerMessage = state.CheckForWin() switch
        {
            GameState.WinState.Player1_Wins => "¡Jugador 1 Gana!",
            GameState.WinState.Player2_Wins => "¡Jugador 2 Gana!",
            GameState.WinState.Tie => "¡Es un empate!",
            _ => ""
        };
    }

    void ResetGame()
    {
        state.ResetBoard();
        WinnerMessage = string.Empty;
        ErrorMessage = string.Empty;
        piezas = new string[42];
    }

    protected override void OnInitialized()
    {
        state.ResetBoard();
    }
}
